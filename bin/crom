#!/usr/bin/env node

var fs = require("fs"),
    path = require("path"),
    crypto = require("crypto"),
    rimraf = require("rimraf"),
    unzip = require("unzip");

var Registry = require("../lib/Registry"),
    Root = require("../lib/Root");

require("../plugin/GitHub");

if (process.argv[2] !== "install") {
  console.error("error: unknown command " + process.argv[2]);
  return process.exit(1);
}

if (!process.argv[3]) {
  console.error("error: missing install target");
  return process.exit(1);
}

Root.init(".", function(error, root) {
  if (error) throw error;
  findAndInstall(root, process.argv[3]);
});

function findAndInstall(root, name) {
  var i = name.indexOf("@"), version = "*";
  if (i >= 0) version = name.slice(i + 1), name = name.slice(0, i);

  Registry.findModules(name, function(error, modules) {
    if (error) throw error;
    if (!modules.length) return void console.error("error: module “" + name + "” not found");

    for (var i = 0, n = modules.length; i < n; ++i) {
      console.log((i ? "✗" : "✓") + " " + modules[i]);
    }

    downloadRelease(root, modules[0], version);
  });
}

function downloadRelease(root, module, version) {
  module.findRelease(version, function(error, release) {
    if (error) throw error;
    console.log("✓ " + release);

    var file = path.join(root.dir, "crom_modules", crypto.createHash("sha256")
        .update(release.url)
        .digest("hex") + ".zip");

    release.download(fs.createWriteStream(file), function(error) {
      if (error) throw error;
      console.log("✓ " + file);
      extractRelease(root, release, file);
    });
  });
}

function computeHash(file, callback) {
  var hash = crypto.createHash("sha256");
  fs.createReadStream(file)
      .on("data", function(chunk) { hash.update(chunk); })
      .on("error", callback)
      .on("end", function() { callback(null, hash.digest("hex")); });
}

function extractRelease(root, release, file) {
  computeHash(file, function(error, hash) {
    if (error) throw error;
    var dir = path.join(root.dir, "crom_modules", hash);

    rimraf(dir, function(error) {
      if (error) throw error;

      fs.createReadStream(file)
          .pipe(unzip.Extract({path: dir}))
          .on("close", saveIndex);
    });

    function saveIndex() {
      console.log("✓ " + dir);
      root.install(release, hash, function(error) {
        if (error) throw error;
        console.log("✓ " + path.join(root.dir, "crom.json"));
      });
    }
  });
}
