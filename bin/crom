#!/usr/bin/env node

var fs = require("fs"),
    path = require("path"),
    crypto = require("crypto"),
    rimraf = require("rimraf"),
    unzip = require("unzip"),
    queue = require("d3-queue");

var Registry = require("../lib/Registry"),
    Root = require("../lib/Root");

require("../plugin/GitHub");

var command;

switch (process.argv[2]) {
  case "install": command = install; break;
  case "uninstall": command = uninstall; break;
  default: {
    console.error("error: unknown command " + process.argv[2]);
    return process.exit(1);
  }
}

function ExternalError(message) {
  this.message = message;
}

ExternalError.prototype = Object.create(new Error);

Root.init(".", command);

function install(error, root) {
  if (error) return void done(error);
  var q = queue(1);

  for (var i = 3, n = process.argv.length; i < n; ++i) {
    var name = process.argv[i], j = name.indexOf("@"), range = "*";
    if (j >= 0) range = name.slice(j + 1), name = name.slice(0, j);
    q.defer(findAndInstall, root, name, range);
  }

  q.awaitAll(done);
}

function uninstall(error, root) {
  if (error) return void done(error);
  var q = queue(1);

  for (var i = 3, n = process.argv.length; i < n; ++i) {
    q.defer(findAndUninstall, root, process.argv[i]);
  }

  q.awaitAll(done);
}

function done(error) {
  if (error instanceof ExternalError) {
    console.error("error: " + error.message);
    return process.exit(1);
  }
  if (error) throw error;
}

function findAndInstall(root, name, range, callback) {
  Registry.findModules(name, function(error, modules) {
    if (error) return void callback(error);
    if (!modules.length) return void callback(new ExternalError("module “" + name + "” not found"));

    for (var i = 0, n = modules.length; i < n; ++i) {
      console.log((i ? "✗" : "✓") + " " + modules[i]);
    }

    findAndInstallRelease(root, modules[0], range, function(error, release, sha) {
      if (error) return void callback(error);

      root.install(release, sha, range, function(error) {
        if (error) return void callback(error);
        console.log("+ " + path.join(root.dir, "crom.json"));
        callback(null);
      });
    });
  });
}

function findAndInstallRelease(root, module, range, callback) {
  module.findRelease(range, function(error, release) {
    if (error) return void callback(error);
    if (!release) return void callback(new ExternalError("release " + module.url + "@" + range + " not found"));
    console.log("✓ " + release);

    var file = path.join(root.dir, "crom_modules", crypto.createHash("sha256")
        .update(release.url)
        .digest("hex") + ".zip");

    release.download(fs.createWriteStream(file), function(error) {
      if (error) return void callback(error);
      console.log("+ " + file);
      extractRelease(root, release, file, callback);
    });
  });
}

function computeSha(file, callback) {
  var sha = crypto.createHash("sha256");
  fs.createReadStream(file)
      .on("data", function(chunk) { sha.update(chunk); })
      .on("error", callback)
      .on("end", function() { callback(null, sha.digest("hex")); });
}

function extractRelease(root, release, file, callback) {
  computeSha(file, function(error, sha) {
    if (error) return void callback(error);
    var dir = path.join(root.dir, "crom_modules", sha);

    rimraf(dir, function(error) {
      if (error) return void callback(error);

      fs.createReadStream(file)
          .pipe(unzip.Extract({path: dir}))
          .on("error", callback)
          .on("close", cleanup);
    });

    function cleanup() {
      console.log("+ " + dir);
      fs.unlink(file, function(error) {
        if (error) return void callback(error);
        console.log("- " + file);
        callback(null, release, sha);
      });
    }
  });
}

function findAndUninstall(root, query, callback) {
  var dependencies = root.findAll(query);
  if (!dependencies.length) return void callback(new ExternalError("dependency " + query + " not found"));

  if (dependencies.length > 1) {
    dependencies.forEach(function(d) { console.log("* " + d.url + "@" + d.version); });
    return void callback(new ExternalError("dependency " + query + " is ambiguous"));
  }

  var dir = path.join(root.dir, "crom_modules", dependencies[0].sha);
  rimraf(dir, function(error) {
    if (error) return void callback(error);
    console.log("- " + dir);
    root.uninstall(dependencies[0], function(error) {
      if (error) return void callback(error);
      console.log("+ " + path.join(root.dir, "crom.json"));
      callback(null);
    });
  });
}
